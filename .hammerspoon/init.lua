-- DO NOT EDIT THIS FILE DIRECTLY
-- This is a file generated from a literate programing source file located at
-- https://github.com/zzamboni/dot-hammerspoon/blob/master/init.org.
-- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

shift_hyper = {"cmd","alt","ctrl","shift"}
ctrl_cmd    = {"cmd","ctrl"}
mash        = {"⌘", "⌥", "⌃"}
hyper       = mash

col = hs.drawing.color.x11

local log = hs.logger.new('init.lua', 'debug')

-- Use Control+` to reload Hammerspoon config
hs.hotkey.bind(mash, 'r', nil, function()
  hs.reload()
end)

hs.grid.setGrid('3x3')
hs.grid.setMargins("0,0")
hs.window.animationDuration = 0

function getWin()
  return hs.window.focusedWindow()
end

--- arrows: move window
hs.hotkey.bind(mash, "left", function() hs.grid.pushWindowLeft() end)
hs.hotkey.bind(mash, "right", function() hs.grid.pushWindowRight() end)
hs.hotkey.bind(mash, "up", function() hs.grid.pushWindowUp() end)
hs.hotkey.bind(mash, "down", function() hs.grid.pushWindowDown() end)

--- ikjl: resize window
hs.hotkey.bind(mash, "k", function() hs.grid.resizeWindowShorter() end)
hs.hotkey.bind(mash, "j", function() hs.grid.resizeWindowTaller() end)
hs.hotkey.bind(mash, "h", function() hs.grid.resizeWindowThinner() end)
hs.hotkey.bind(mash, "l", function() hs.grid.resizeWindowWider() end)

--- 234: resize grid
hs.hotkey.bind(mash, "2", function() hs.grid.setGrid('2x2'); hs.alert.show('Grid set to 2x2'); end)
hs.hotkey.bind(mash, "3", function() hs.grid.setGrid('3x3'); hs.alert.show('Grid set to 3x3'); end)
hs.hotkey.bind(mash, "4", function() hs.grid.setGrid('4x4'); hs.alert.show('Grid set to 4x4'); end)

--- /: move window to next screen
hs.hotkey.bind(mash, "/", function() local win = getWin(); win:moveToScreen(win:screen():next()) end)

--- ,: snap window to grid
hs.hotkey.bind(mash, ",", function() hs.grid.snap(getWin()) end)

--- space: maximize window
hs.hotkey.bind(mash, "space", function() hs.grid.maximizeWindow() end)

--- .: minimize window
hs.hotkey.bind(mash, ".", function() hs.grid.set(getWin(), '0,0 1x1'); end)

--- a: lock screen
hs.hotkey.bind(mash, "9", function() hs.caffeinate.lockScreen(); end)

--- .: show sheet
hs.hotkey.bind(mash, "0", function() hs.alert.show("Hyper: Command + Option + Control \
\
up(↑) down(↓) left(←) right(→) \
\
grid(g,234) next screen(/) max(<space>) min(.)\
\
capture(t) 进入Model(Ctrl+F12)\
"); end)

org_capture_path = os.getenv("HOME").."/.hammerspoon/files/org-capture.lua"
script_file = io.open(org_capture_path, "w")
script_file:write([[local win = hs.window.frontmostWindow()
local o,s,t,r = hs.execute("~/.emacs.d/bin/org-capture", true)
if not s then
  print("Error when running org-capture: "..o.."\n")
end
win:focus()
]])
script_file:close()

hs.hotkey.bindSpec({mash, "t"},
  function ()
    hs.task.new("/bin/bash", nil, { "-l", "-c", "/usr/local/bin/hs "..org_capture_path }):start()
  end
)

hs.loadSpoon("SpoonInstall")
hs.loadSpoon("ModalMgr")

spoon.SpoonInstall.use_syncinstall = true

Install=spoon.SpoonInstall

----------------------------------------------------------------------------------------------------
-- Then we create/register all kinds of modal keybindings environments.
----------------------------------------------------------------------------------------------------
-- Register windowHints (Register a keybinding which is NOT modal environment with modal supervisor)
hswhints_keys = hswhints_keys or {"alt", "tab"}
if string.len(hswhints_keys[2]) > 0 then
  spoon.ModalMgr.supervisor:bind(hswhints_keys[1], hswhints_keys[2], 'Show Window Hints', function()
                                   spoon.ModalMgr:deactivateAll()
                                   hs.hints.windowHints()
  end)
end

local cmodal

-- Ctrl + Alt
Install:andUse("AppLauncher", {
  hotkeys = {
    c = "Calendar",
    d = "Dash",
    e = "Emacs",
    f = "Finder",
    i = "iTerm",
    n = "Notes",
    w = "WeChat"
  }
})

----------------------------------------------------------------------------------------------------
-- resizeM modal environment
Install:andUse("WinWin", {
                 fn = function (s)
                   spoon.ModalMgr:new("resizeM")
                   cmodal = spoon.ModalMgr.modal_list["resizeM"]
                   cmodal:bind('', 'escape', 'Deactivate resizeM', function() spoon.ModalMgr:deactivate({"resizeM"}) end)
                   cmodal:bind('', 'Q', 'Deactivate resizeM', function() spoon.ModalMgr:deactivate({"resizeM"}) end)
                   cmodal:bind('', 'tab', 'Toggle Cheatsheet', function() spoon.ModalMgr:toggleCheatsheet() end)
                   -------------------------------- Movement --------------------------------
                   cmodal:bind('', 'A', 'Move Leftward', function() s:stepMove("left") end, nil, function() sj:stepMove("left") end)
                   cmodal:bind('', 'D', 'Move Rightward', function() s:stepMove("right") end, nil, function() s:stepMove("right") end)
                   cmodal:bind('', 'W', 'Move Upward', function() s:stepMove("up") end, nil, function() s:stepMove("up") end)
                   cmodal:bind('', 'S', 'Move Downward', function() s:stepMove("down") end, nil, function() s:stepMove("down") end)
                   cmodal:bind('shift', 'H', 'Move Leftward', function() s:stepResize("left") end, nil, function() s:stepResize("left") end)
                   cmodal:bind('shift', 'L', 'Move Rightward', function() s:stepResize("right") end, nil, function() s:stepResize("right") end)
                   cmodal:bind('shift', 'K', 'Move Upward', function() s:stepResize("up") end, nil, function() s:stepResize("up") end)
                   cmodal:bind('shift', 'J', 'Move Downward', function() s:stepResize("down") end, nil, function() s:stepResize("down") end)
                   -------------------------------- Half Split --------------------------------
                   cmodal:bind('', 'H', 'Lefthalf of Screen', function() s:moveAndResize("halfleft") end)
                   cmodal:bind('', 'L', 'Righthalf of Screen', function() s:moveAndResize("halfright") end)
                   cmodal:bind('', 'K', 'Uphalf of Screen', function() s:moveAndResize("halfup") end)
                   cmodal:bind('', 'J', 'Downhalf of Screen', function() s:moveAndResize("halfdown") end)
                   cmodal:bind('', 'F', 'Fullscreen', function() s:moveAndResize("fullscreen") end)
                   cmodal:bind('', 'C', 'Center Window', function() s:moveAndResize("center") end)
                   cmodal:bind('', 'M', 'Maximize Window', function() s:moveAndResize("maximize") end)
                   cmodal:bind('shift', 'M', 'Maximize Window', function() s:moveAndResize("minimize") end)
                   cmodal:bind('ctrl', 'H', 'NorthWest Corner', function() s:moveAndResize("cornerNW") end)
                   cmodal:bind('ctrl', 'L', 'NorthEast Corner', function() s:moveAndResize("cornerNE") end)
                   cmodal:bind('ctrl', 'J', 'SouthWest Corner', function() s:moveAndResize("cornerSW") end)
                   cmodal:bind('ctrl', 'K', 'SouthEast Corner', function() s:moveAndResize("cornerSE") end)
                   cmodal:bind('', '=', 'Stretch Outward', function() s:moveAndResize("expand") end, nil, function() s:moveAndResize("expand") end)
                   cmodal:bind('', '-', 'Shrink Inward', function() s:moveAndResize("shrink") end, nil, function() s:moveAndResize("shrink") end)
                   -------------------------------- Monitor Movement --------------------------------
                   cmodal:bind('', 'left', 'Move to Left Monitor', function() s:moveToScreen("left") end)
                   cmodal:bind('', 'right', 'Move to Right Monitor', function() s:moveToScreen("right") end)
                   cmodal:bind('', 'up', 'Move to Above Monitor', function() s:moveToScreen("up") end)
                   cmodal:bind('', 'down', 'Move to Below Monitor', function() s:moveToScreen("down") end)
                   cmodal:bind('', 'space', 'Move to Next Monitor', function() s:moveToScreen("next") end)
                   -------------------------------- Re&Undo --------------------------------
                   cmodal:bind('', '[', 'Undo Window Manipulation', function() s:undo() end)
                   cmodal:bind('', ']', 'Redo Window Manipulation', function() s:redo() end)
                   cmodal:bind('', '`', 'Center Cursor', function() s:centerCursor() end)
                 end
})

Install:andUse("WindowHalfsAndThirds",
               {
                 config = {
                   use_frame_correctness = true
                 },
                 -- hotkeys = 'default',
                 fn = function (s)
                   --- 1/3 ---
                   cmodal:bind('cmd', 'H', 'Left Screen/3', function() s:thirdLeft() end)
                   cmodal:bind('cmd', 'L', 'Right Screen/3', function() s:thirdRight() end)
                   cmodal:bind('cmd', 'J', 'Top Screen/3', function() s:thirdUp() end)
                   cmodal:bind('cmd', 'K', 'Bottom Screen/3', function() s:thirdDown() end)
                 end
               }
)

myGrid = { w = 4, h = 4 }
Install:andUse("WindowGrid",
               {
                 config = { gridGeometries =
                              { { myGrid.w .."x" .. myGrid.h } } },
                 hotkeys = {show_grid = {hyper, "g"}},
                 start = true
               }
)

Install:andUse("ToggleScreenRotation",
               {
                 hotkeys = { first = {hyper, "f12"} }
               }
)

-- Register resizeM with modal supervisor
hsresizeM_keys = hsresizeM_keys or {"ctrl", "f12"}
if string.len(hsresizeM_keys[2]) > 0 then
  spoon.ModalMgr.supervisor:bind(hsresizeM_keys[1], hsresizeM_keys[2], "Enter resizeM Environment", function()
                                   -- Deactivate some modal environments or not before activating a new one
                                   spoon.ModalMgr:deactivateAll()
                                   -- Show an status indicator so we know we're in some modal environment now
                                   spoon.ModalMgr:activate({"resizeM"}, "#B22222")
  end)
end

----------------------------------------------------------------------------------------------------
-- Finally we initialize ModalMgr supervisor
spoon.ModalMgr.supervisor:enter()

hs.notify.new({title='Hammerspoon', informativeText='Ready to rock 🤘'}):send()
