-- DO NOT EDIT THIS FILE DIRECTLY
-- This is a file generated from a literate programing source file located at
-- https://github.com/zzamboni/dot-hammerspoon/blob/master/init.org.
-- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

hs.logger.defaultLogLevel="info"

hyper       = {"cmd","alt","ctrl"}
shift_hyper = {"cmd","alt","ctrl","shift"}
ctrl_cmd    = {"cmd","ctrl"}
mash        = {"⌘", "⌥", "⌃"}

col = hs.drawing.color.x11

work_logo = hs.image.imageFromPath(hs.configdir .. "/img/cheng.png")

local function toggleApplication(name)
  local app = hs.application.find(name)
  if not app or app:isHidden() then
    hs.application.launchOrFocus(name)
  elseif hs.application.frontmostApplication() ~= app then
    app:activate()
  else
    app:hide()
  end
end

hs.hotkey.bind(mash, "c", function() toggleApplication("Google Chrome") end)
hs.hotkey.bind(mash, "d", function() toggleApplication("Dash") end)
hs.hotkey.bind(mash, "f", function() toggleApplication("Finder") end)
hs.hotkey.bind(mash, "g", function() toggleApplication("SourceTree") end)
hs.hotkey.bind(mash, "m", function() toggleApplication("Mail") end)
hs.hotkey.bind(mash, "p", function() toggleApplication("System Preferences") end)
hs.hotkey.bind(mash, "s", function() toggleApplication("Spotify") end)
hs.hotkey.bind(mash, "t", function() toggleApplication("iTerm2") end)

hs.grid.setGrid'3x3'
hs.grid.setMargins("0,0")
hs.window.animationDuration = 0

function getWin()
  return hs.window.focusedWindow()
end

--- arrows: move window
hs.hotkey.bind(mash, "left", function() hs.grid.pushWindowLeft() end)
hs.hotkey.bind(mash, "right", function() hs.grid.pushWindowRight() end)
hs.hotkey.bind(mash, "up", function() hs.grid.pushWindowUp() end)
hs.hotkey.bind(mash, "down", function() hs.grid.pushWindowDown() end)

--- ikjl: resize window
hs.hotkey.bind(mash, "k", function() hs.grid.resizeWindowShorter() end)
hs.hotkey.bind(mash, "j", function() hs.grid.resizeWindowTaller() end)
hs.hotkey.bind(mash, "h", function() hs.grid.resizeWindowThinner() end)
hs.hotkey.bind(mash, "l", function() hs.grid.resizeWindowWider() end)

--- 234: resize grid
hs.hotkey.bind(mash, "2", function() hs.grid.setGrid('2x2'); hs.alert.show('Grid set to 2x2'); end)
hs.hotkey.bind(mash, "3", function() hs.grid.setGrid('3x3'); hs.alert.show('Grid set to 3x3'); end)
hs.hotkey.bind(mash, "4", function() hs.grid.setGrid('4x4'); hs.alert.show('Grid set to 4x4'); end)

--- /: move window to next screen
hs.hotkey.bind(mash, "/", function() local win = getWin(); win:moveToScreen(win:screen():next()) end)

--- ,: snap window to grid
hs.hotkey.bind(mash, ",", function() hs.grid.snap(getWin()) end)

--- space: maximize window
hs.hotkey.bind(mash, "space", function() hs.grid.maximizeWindow() end)

--- .: minimize window
hs.hotkey.bind(mash, ".", function() hs.grid.set(getWin(), '0,0 1x1'); end)

--- a: lock screen
hs.hotkey.bind(mash, "9", function() hs.caffeinate.lockScreen(); end)

--- .: show sheet
hs.hotkey.bind(mash, "0", function() hs.alert.show("Hyper: Command + Option + Control \
\
up(↑) down(↓) left(←) right(→) \
\
grid(,234) next screen(/) max(<space>) min(.)\
"); end)

hs.loadSpoon("SpoonInstall")
hs.loadSpoon("ModalMgr")

spoon.SpoonInstall.use_syncinstall = true

Install=spoon.SpoonInstall

----------------------------------------------------------------------------------------------------
-- Then we create/register all kinds of modal keybindings environments.
----------------------------------------------------------------------------------------------------
-- Register windowHints (Register a keybinding which is NOT modal environment with modal supervisor)
hswhints_keys = hswhints_keys or {"alt", "tab"}
if string.len(hswhints_keys[2]) > 0 then
  spoon.ModalMgr.supervisor:bind(hswhints_keys[1], hswhints_keys[2], 'Show Window Hints', function()
                                   spoon.ModalMgr:deactivateAll()
                                   hs.hints.windowHints()
  end)
end

local cmodal

----------------------------------------------------------------------------------------------------
-- resizeM modal environment
Install:andUse("WinWin", {
                 fn = function (s)
                   spoon.ModalMgr:new("resizeM")
                   cmodal = spoon.ModalMgr.modal_list["resizeM"]
                   cmodal:bind('', 'escape', 'Deactivate resizeM', function() spoon.ModalMgr:deactivate({"resizeM"}) end)
                   cmodal:bind('', 'Q', 'Deactivate resizeM', function() spoon.ModalMgr:deactivate({"resizeM"}) end)
                   cmodal:bind('', 'tab', 'Toggle Cheatsheet', function() spoon.ModalMgr:toggleCheatsheet() end)
                   -------------------------------- Movement --------------------------------
                   cmodal:bind('', 'A', 'Move Leftward', function() s:stepMove("left") end, nil, function() sj:stepMove("left") end)
                   cmodal:bind('', 'D', 'Move Rightward', function() s:stepMove("right") end, nil, function() s:stepMove("right") end)
                   cmodal:bind('', 'W', 'Move Upward', function() s:stepMove("up") end, nil, function() s:stepMove("up") end)
                   cmodal:bind('', 'S', 'Move Downward', function() s:stepMove("down") end, nil, function() s:stepMove("down") end)
                   cmodal:bind('shift', 'H', 'Move Leftward', function() s:stepResize("left") end, nil, function() s:stepResize("left") end)
                   cmodal:bind('shift', 'L', 'Move Rightward', function() s:stepResize("right") end, nil, function() s:stepResize("right") end)
                   cmodal:bind('shift', 'K', 'Move Upward', function() s:stepResize("up") end, nil, function() s:stepResize("up") end)
                   cmodal:bind('shift', 'J', 'Move Downward', function() s:stepResize("down") end, nil, function() s:stepResize("down") end)
                   -------------------------------- Half Split --------------------------------
                   cmodal:bind('', 'H', 'Lefthalf of Screen', function() s:moveAndResize("halfleft") end)
                   cmodal:bind('', 'L', 'Righthalf of Screen', function() s:moveAndResize("halfright") end)
                   cmodal:bind('', 'K', 'Uphalf of Screen', function() s:moveAndResize("halfup") end)
                   cmodal:bind('', 'J', 'Downhalf of Screen', function() s:moveAndResize("halfdown") end)
                   cmodal:bind('', 'F', 'Fullscreen', function() s:moveAndResize("fullscreen") end)
                   cmodal:bind('', 'C', 'Center Window', function() s:moveAndResize("center") end)
                   cmodal:bind('', 'M', 'Maximize Window', function() s:moveAndResize("maximize") end)
                   cmodal:bind('shift', 'M', 'Maximize Window', function() s:moveAndResize("minimize") end)
                   cmodal:bind('ctrl', 'H', 'NorthWest Corner', function() s:moveAndResize("cornerNW") end)
                   cmodal:bind('ctrl', 'L', 'NorthEast Corner', function() s:moveAndResize("cornerNE") end)
                   cmodal:bind('ctrl', 'J', 'SouthWest Corner', function() s:moveAndResize("cornerSW") end)
                   cmodal:bind('ctrl', 'K', 'SouthEast Corner', function() s:moveAndResize("cornerSE") end)
                   cmodal:bind('', '=', 'Stretch Outward', function() s:moveAndResize("expand") end, nil, function() s:moveAndResize("expand") end)
                   cmodal:bind('', '-', 'Shrink Inward', function() s:moveAndResize("shrink") end, nil, function() s:moveAndResize("shrink") end)
                   -------------------------------- Monitor Movement --------------------------------
                   cmodal:bind('', 'left', 'Move to Left Monitor', function() s:moveToScreen("left") end)
                   cmodal:bind('', 'right', 'Move to Right Monitor', function() s:moveToScreen("right") end)
                   cmodal:bind('', 'up', 'Move to Above Monitor', function() s:moveToScreen("up") end)
                   cmodal:bind('', 'down', 'Move to Below Monitor', function() s:moveToScreen("down") end)
                   cmodal:bind('', 'space', 'Move to Next Monitor', function() s:moveToScreen("next") end)
                   -------------------------------- Re&Undo --------------------------------
                   cmodal:bind('', '[', 'Undo Window Manipulation', function() s:undo() end)
                   cmodal:bind('', ']', 'Redo Window Manipulation', function() s:redo() end)
                   cmodal:bind('', '`', 'Center Cursor', function() s:centerCursor() end)
                 end
})

Install:andUse("WindowHalfsAndThirds",
               {
                 config = {
                   use_frame_correctness = true
                 },
                 -- hotkeys = 'default',
                 fn = function (s)
                   --- 1/3 ---
                   cmodal:bind('cmd', 'H', 'Left Screen/3', function() s:thirdLeft() end)
                   cmodal:bind('cmd', 'L', 'Right Screen/3', function() s:thirdRight() end)
                   cmodal:bind('cmd', 'J', 'Top Screen/3', function() s:thirdUp() end)
                   cmodal:bind('cmd', 'K', 'Bottom Screen/3', function() s:thirdDown() end)
                 end
               }
)

-- Register resizeM with modal supervisor
hsresizeM_keys = hsresizeM_keys or {"alt", "R"}
if string.len(hsresizeM_keys[2]) > 0 then
  spoon.ModalMgr.supervisor:bind(hsresizeM_keys[1], hsresizeM_keys[2], "Enter resizeM Environment", function()
                                   -- Deactivate some modal environments or not before activating a new one
                                   spoon.ModalMgr:deactivateAll()
                                   -- Show an status indicator so we know we're in some modal environment now
                                   spoon.ModalMgr:activate({"resizeM"}, "#B22222")
  end)
end

function appID(app)
  return hs.application.infoForBundlePath(app)['CFBundleIdentifier']
end

-- chromeBrowser = appID('/Applications/Google Chrome.app')

-- DefaultBrowser = chromeBrowser
-- WorkBrowser = chromeBrowser

-- GmailApp = appID('~/Applications/Epichrome/Gmail.app')
-- WikiApp = appID('~/Applications/Epichrome/Wiki.app')
-- CollabApp = WorkBrowser
-- SmcaApp = WorkBrowser
-- OpsGenieApp = WorkBrowser
-- TeamsApp = appID('/Applications/Microsoft Teams.app')

-- Install:andUse("URLDispatcher", {
--                  config = {
--                    url_patterns = {
--                      -- { "https?://wiki%.swisscom%.com",     WikiApp }
--                    },
--                    url_redir_decoders = {
--                      { "Fix broken Preview anchor URLs",
--                        "%%23", "#", false, "Preview" },
--                    },
--                    default_handler = DefaultBrowser
--                  },
--                  start = true
--                  -- loglevel = 'debug'
-- })

Install:andUse("WindowScreenLeftAndRight",
               {
                 config = {
                   animationDuration = 0
                 },
                 hotkeys = 'default',
--                 loglevel = 'debug'
               }
)

myGrid = { w = 6, h = 4 }
Install:andUse("WindowGrid",
               {
                 config = { gridGeometries =
                              { { myGrid.w .."x" .. myGrid.h } } },
                 hotkeys = {show_grid = {hyper, "g"}},
                 start = true
               }
)

Install:andUse("ToggleScreenRotation",
               {
                 hotkeys = { first = {hyper, "f12"} }
               }
)

-- Install:andUse("HSaria2",
--                {
--                  fn = function (s)
--                    -- First we need to connect to aria2 rpc host
--                    hsaria2_host = hsaria2_host or "http://localhost:6700/jsonrpc"
--                    hsaria2_secret = hsaria2_secret or "token"
--                    s:connectToHost(hsaria2_host, hsaria2_secret)

--                    hsaria2_keys = hsaria2_keys or {"alt", "D"}
--                    if string.len(hsaria2_keys[2]) > 0 then
--                      spoon.ModalMgr.supervisor:bind(hsaria2_keys[1], hsaria2_keys[2], 'Toggle aria2 Panel', function() s:togglePanel() end)
--                    end
--                  end
--                }
-- )

org_capture_path = os.getenv("HOME").."/.hammerspoon/files/org-capture.lua"
script_file = io.open(org_capture_path, "w")
script_file:write([[local win = hs.window.frontmostWindow()
local o,s,t,r = hs.execute("~/.emacs.d/bin/org-capture", true)
if not s then
  print("Error when running org-capture: "..o.."\n")
end
win:focus()
]])
script_file:close()

hs.hotkey.bindSpec({hyper, "t"},
  function ()
    hs.task.new("/bin/bash", nil, { "-l", "-c", "/usr/local/bin/hs "..org_capture_path }):start()
  end
)

----------------------------------------------------------------------------------------------------
-- Register lock screen
hslock_keys = hslock_keys or {"alt", "L"}
if string.len(hslock_keys[2]) > 0 then
    spoon.ModalMgr.supervisor:bind(hslock_keys[1], hslock_keys[2], "Lock Screen", function()
        hs.caffeinate.lockScreen()
    end)
end

----------------------------------------------------------------------------------------------------
-- Register AClock
if spoon.AClock then
    hsaclock_keys = hsaclock_keys or {"alt", "T"}
    if string.len(hsaclock_keys[2]) > 0 then
        spoon.ModalMgr.supervisor:bind(hsaclock_keys[1], hsaclock_keys[2], "Toggle Floating Clock", function() spoon.AClock:toggleShow() end)
    end
end

-- ----------------------------------------------------------------------------------------------------
-- -- Register browser tab typist: Type URL of current tab of running browser in markdown format. i.e. [title](link)
-- hstype_keys = hstype_keys or {"alt", "V"}
-- if string.len(hstype_keys[2]) > 0 then
--     spoon.ModalMgr.supervisor:bind(hstype_keys[1], hstype_keys[2], "Type Browser Link", function()
--         local safari_running = hs.application.applicationsForBundleID("com.apple.Safari")
--         local chrome_running = hs.application.applicationsForBundleID("com.google.Chrome")
--         -- if #safari_running > 0 then
--         --     local stat, data = hs.applescript('tell application "Safari" to get {URL, name} of current tab of window 1')
--         --     if stat then hs.eventtap.keyStrokes("[" .. data[2] .. "](" .. data[1] .. ")") end
--         if #chrome_running > 0 then
--             local stat, data = hs.applescript('tell application "Google Chrome" to get {URL, title} of active tab of window 1')
--             -- Markdown Format
--             -- if stat then hs.eventtap.keyStrokes("[" .. data[2] .. "](" .. data[1] .. ")") end
--             -- Org Format
--             if stat then hs.eventtap.keyStrokes("[[" .. data[1] .. "][" .. data[2] .. "]]") end
--         end
--     end)
-- end

-- Install:andUse("AClock",
--                {
--                  config = {
--                    format = "%H:%M"
--                  },
--                  fn = function(s)
--                    hsaclock_keys = hsaclock_keys or {"alt", "T"}
--                    if string.len(hsaclock_keys[2]) > 0 then
--                      spoon.ModalMgr.supervisor:bind(hsaclock_keys[1], hsaclock_keys[2], "Toggle Floating Clock", function() s:toggleShow() end)
--                    end
--                  end

--                  -- start = true
--                }
-- )

Install:andUse("Hammer",
               {
                 -- repo = 'zzspoons',
                 config = { auto_reload_config = true },
                 hotkeys = {
                   config_reload = {hyper, "r"},
                   toggle_console = {hyper, "y"}
                 },
--                 fn = BTT_restart_Hammerspoon,
                 start = true
               }
)

Install:andUse("Caffeine", {
                 start = true,
                 hotkeys = {
                   toggle = { hyper, "1" }
                 },
--                 fn = BTT_caffeine_widget,
})

Install:andUse("ColorPicker",
               {
                 -- 太卡了
                 disable = true,
                 hotkeys = {
                   show = { hyper, "z" }
                 },
                 config = {
                   show_in_menubar = false,
                 },
                 start = true,
               }
)

-- Install:andUse("EjectMenu", {
--                  config = {
--                    eject_on_lid_close = false,
--                    eject_on_sleep = true,
--                    show_in_menubar = false,
--                    notify = true,
--                  },
--                  hotkeys = { ejectAll = { hyper, "=" } },
--                  start = true,
-- --                 loglevel = 'debug'
-- })

----------------------------------------------------------------------------------------------------
-- Finally we initialize ModalMgr supervisor
spoon.ModalMgr.supervisor:enter()

hs.alert('Hammerspoon config Reload!')
