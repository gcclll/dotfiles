#+TITLE:  My Hammerspoon Confiration
#+DATE: <2021-08-12 15:47:14>
#+EMAIL: Lee ZhiCheng<gccll.love@gmail.com>
#+CATEGORIES[]: macos
#+LANGUAGE: zh-cn
#+LANGUAGE: zh-cn
#+STARTUP: indent
#+auto_tangle: t

:CONFIG:
#+property: header-args:lua :tangle init.lua
#+property: header-args :mkdirp yes :comments no
#+startup: indent

#+begin_src lua :exports none
-- DO NOT EDIT THIS FILE DIRECTLY
-- This is a file generated from a literate programing source file located at
-- https://github.com/zzamboni/dot-hammerspoon/blob/master/init.org.
-- You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+end_src
:END:


#+begin_quote
Original Configuration: https://github.com/zzamboni/dot-hammerspoon

This file is written in [[https://leanpub.com/lit-config][literate programming style]] using [[https://orgmode.org/][org-mode]]. See [[https://github.com/zzamboni/dot-hammerspoon/blob/master/init.lua][init.lua]]
for the generated file. You can see this in a nicer format on my blog post [[http://zzamboni.org/post/my-hammerspoon-configuration-with-commentary/][My
Hammerspoon Configuration, With Commentary]].
#+end_quote

If you want to learn more about Hammerspoon, check out my book [[https://leanpub.com/learning-hammerspoon][Learning Hammerspoon]]!

* Keybindings
hyper key: =Command + Option + Control=

| key | action        |
|-----+---------------|
| =A=   | Lock Screen   |
| =R=   | Reload config |

Launch Apps:
| Key | App                |
|-----+--------------------|
| C   | Chrome             |
| D   | Dash               |
| F   | Finder             |
| G   | SourceTree         |
| P   | System Preferences |
| S   | Spotify            |
| T   | iTerm2             |

Window management:

| Key     | Action          |
|---------+-----------------|
| =<-=      | Move Left       |
| =->=      | Move Right      |
| =↑=       | Move up         |
| =↓=       | Move Down       |
| =i=       | Decrease height |
| =k=       | Increase height |
| =j=       | Decrease width  |
| =l=       | Increase width  |
| =2=       | Set 2x2 grid    |
| =3=       | Set 3x3 grid    |
| =4=       | Set 4x4 grid    |
| ~/~       | To next screen  |
| =,=       | Snap to grid    |
| =(space)= | Maximize window |
| ~.~       | Minimize window |

* General variables and configuration

Global log level. Per-spoon log level can be configured in each =Install:andUse= block below.

#+begin_src lua
hs.logger.defaultLogLevel="info"
#+end_src

组合键(=hyper=, =shift_hyper= and =ctrl_cmd=)：

#+begin_src lua
hyper       = {"cmd","alt","ctrl"}
shift_hyper = {"cmd","alt","ctrl","shift"}
ctrl_cmd    = {"cmd","ctrl"}
mash        = {"⌘", "⌥", "⌃"}
#+end_src

=hs.drawing.color.x11= 的缩写:

#+begin_src lua
col = hs.drawing.color.x11
#+end_src

Logo:

#+begin_src lua
work_logo = hs.image.imageFromPath(hs.configdir .. "/img/cheng.png")
#+end_src

* Applications
#+begin_src lua
local function toggleApplication(name)
  local app = hs.application.find(name)
  if not app or app:isHidden() then
    hs.application.launchOrFocus(name)
  elseif hs.application.frontmostApplication() ~= app then
    app:activate()
  else
    app:hide()
  end
end

hs.hotkey.bind(mash, "c", function() toggleApplication("Google Chrome") end)
hs.hotkey.bind(mash, "d", function() toggleApplication("Dash") end)
hs.hotkey.bind(mash, "f", function() toggleApplication("Finder") end)
hs.hotkey.bind(mash, "g", function() toggleApplication("SourceTree") end)
hs.hotkey.bind(mash, "m", function() toggleApplication("Mail") end)
hs.hotkey.bind(mash, "p", function() toggleApplication("System Preferences") end)
hs.hotkey.bind(mash, "s", function() toggleApplication("Spotify") end)
hs.hotkey.bind(mash, "t", function() toggleApplication("iTerm2") end)
#+end_src
* Grid
#+begin_src lua
hs.grid.setGrid'3x3'
hs.grid.setMargins("0,0")
hs.window.animationDuration = 0

function getWin()
  return hs.window.focusedWindow()
end

--- arrows: move window
hs.hotkey.bind(mash, "left", function() hs.grid.pushWindowLeft() end)
hs.hotkey.bind(mash, "right", function() hs.grid.pushWindowRight() end)
hs.hotkey.bind(mash, "up", function() hs.grid.pushWindowUp() end)
hs.hotkey.bind(mash, "down", function() hs.grid.pushWindowDown() end)

--- ikjl: resize window
hs.hotkey.bind(mash, "k", function() hs.grid.resizeWindowShorter() end)
hs.hotkey.bind(mash, "j", function() hs.grid.resizeWindowTaller() end)
hs.hotkey.bind(mash, "h", function() hs.grid.resizeWindowThinner() end)
hs.hotkey.bind(mash, "l", function() hs.grid.resizeWindowWider() end)

--- 234: resize grid
hs.hotkey.bind(mash, "2", function() hs.grid.setGrid('2x2'); hs.alert.show('Grid set to 2x2'); end)
hs.hotkey.bind(mash, "3", function() hs.grid.setGrid('3x3'); hs.alert.show('Grid set to 3x3'); end)
hs.hotkey.bind(mash, "4", function() hs.grid.setGrid('4x4'); hs.alert.show('Grid set to 4x4'); end)

--- /: move window to next screen
hs.hotkey.bind(mash, "/", function() local win = getWin(); win:moveToScreen(win:screen():next()) end)

--- ,: snap window to grid
hs.hotkey.bind(mash, ",", function() hs.grid.snap(getWin()) end)

--- space: maximize window
hs.hotkey.bind(mash, "space", function() hs.grid.maximizeWindow() end)

--- .: minimize window
hs.hotkey.bind(mash, ".", function() hs.grid.set(getWin(), '0,0 1x1'); end)

--- a: lock screen
hs.hotkey.bind(mash, "9", function() hs.caffeinate.lockScreen(); end)

--- .: show sheet
hs.hotkey.bind(mash, "0", function() hs.alert.show("Hyper: Command + Option + Control \
\
up(↑) down(↓) left(←) right(→) \
\
grid(,234) next screen(/) max(<space>) min(.)\
"); end)
#+end_src
* Spoon Management

SpoonInstall: spoon 管理器，需要手动安装。

#+begin_src lua
hs.loadSpoon("SpoonInstall")
hs.loadSpoon("ModalMgr")
#+end_src

同步通知：

#+begin_src lua
spoon.SpoonInstall.use_syncinstall = true
#+end_src

This is just a shortcut to make the declarations below look more readable, i.e.
=Install:andUse= instead of =spoon.SpoonInstall:andUse=.

#+begin_src lua
Install=spoon.SpoonInstall
#+end_src
* Start ModalMgr

Start:

#+begin_src lua
----------------------------------------------------------------------------------------------------
-- Then we create/register all kinds of modal keybindings environments.
----------------------------------------------------------------------------------------------------
-- Register windowHints (Register a keybinding which is NOT modal environment with modal supervisor)
hswhints_keys = hswhints_keys or {"alt", "tab"}
if string.len(hswhints_keys[2]) > 0 then
  spoon.ModalMgr.supervisor:bind(hswhints_keys[1], hswhints_keys[2], 'Show Window Hints', function()
                                   spoon.ModalMgr:deactivateAll()
                                   hs.hints.windowHints()
  end)
end
#+end_src

** BEGIN Alt+R

#+begin_src lua
local cmodal
#+end_src

** WinWin

[[http://www.hammerspoon.org/Spoons/WinWin.html][WinWin]]: Window management with short keys after toggle on:

#+begin_src lua
----------------------------------------------------------------------------------------------------
-- resizeM modal environment
Install:andUse("WinWin", {
                 fn = function (s)
                   spoon.ModalMgr:new("resizeM")
                   cmodal = spoon.ModalMgr.modal_list["resizeM"]
                   cmodal:bind('', 'escape', 'Deactivate resizeM', function() spoon.ModalMgr:deactivate({"resizeM"}) end)
                   cmodal:bind('', 'Q', 'Deactivate resizeM', function() spoon.ModalMgr:deactivate({"resizeM"}) end)
                   cmodal:bind('', 'tab', 'Toggle Cheatsheet', function() spoon.ModalMgr:toggleCheatsheet() end)
                   -------------------------------- Movement --------------------------------
                   cmodal:bind('', 'A', 'Move Leftward', function() s:stepMove("left") end, nil, function() sj:stepMove("left") end)
                   cmodal:bind('', 'D', 'Move Rightward', function() s:stepMove("right") end, nil, function() s:stepMove("right") end)
                   cmodal:bind('', 'W', 'Move Upward', function() s:stepMove("up") end, nil, function() s:stepMove("up") end)
                   cmodal:bind('', 'S', 'Move Downward', function() s:stepMove("down") end, nil, function() s:stepMove("down") end)
                   cmodal:bind('shift', 'H', 'Move Leftward', function() s:stepResize("left") end, nil, function() s:stepResize("left") end)
                   cmodal:bind('shift', 'L', 'Move Rightward', function() s:stepResize("right") end, nil, function() s:stepResize("right") end)
                   cmodal:bind('shift', 'K', 'Move Upward', function() s:stepResize("up") end, nil, function() s:stepResize("up") end)
                   cmodal:bind('shift', 'J', 'Move Downward', function() s:stepResize("down") end, nil, function() s:stepResize("down") end)
                   -------------------------------- Half Split --------------------------------
                   cmodal:bind('', 'H', 'Lefthalf of Screen', function() s:moveAndResize("halfleft") end)
                   cmodal:bind('', 'L', 'Righthalf of Screen', function() s:moveAndResize("halfright") end)
                   cmodal:bind('', 'K', 'Uphalf of Screen', function() s:moveAndResize("halfup") end)
                   cmodal:bind('', 'J', 'Downhalf of Screen', function() s:moveAndResize("halfdown") end)
                   cmodal:bind('', 'F', 'Fullscreen', function() s:moveAndResize("fullscreen") end)
                   cmodal:bind('', 'C', 'Center Window', function() s:moveAndResize("center") end)
                   cmodal:bind('', 'M', 'Maximize Window', function() s:moveAndResize("maximize") end)
                   cmodal:bind('shift', 'M', 'Maximize Window', function() s:moveAndResize("minimize") end)
                   cmodal:bind('ctrl', 'H', 'NorthWest Corner', function() s:moveAndResize("cornerNW") end)
                   cmodal:bind('ctrl', 'L', 'NorthEast Corner', function() s:moveAndResize("cornerNE") end)
                   cmodal:bind('ctrl', 'J', 'SouthWest Corner', function() s:moveAndResize("cornerSW") end)
                   cmodal:bind('ctrl', 'K', 'SouthEast Corner', function() s:moveAndResize("cornerSE") end)
                   cmodal:bind('', '=', 'Stretch Outward', function() s:moveAndResize("expand") end, nil, function() s:moveAndResize("expand") end)
                   cmodal:bind('', '-', 'Shrink Inward', function() s:moveAndResize("shrink") end, nil, function() s:moveAndResize("shrink") end)
                   -------------------------------- Monitor Movement --------------------------------
                   cmodal:bind('', 'left', 'Move to Left Monitor', function() s:moveToScreen("left") end)
                   cmodal:bind('', 'right', 'Move to Right Monitor', function() s:moveToScreen("right") end)
                   cmodal:bind('', 'up', 'Move to Above Monitor', function() s:moveToScreen("up") end)
                   cmodal:bind('', 'down', 'Move to Below Monitor', function() s:moveToScreen("down") end)
                   cmodal:bind('', 'space', 'Move to Next Monitor', function() s:moveToScreen("next") end)
                   -------------------------------- Re&Undo --------------------------------
                   cmodal:bind('', '[', 'Undo Window Manipulation', function() s:undo() end)
                   cmodal:bind('', ']', 'Redo Window Manipulation', function() s:redo() end)
                   cmodal:bind('', '`', 'Center Cursor', function() s:centerCursor() end)
                 end
})
#+end_src

** WindowHalfsAndThirds

#+begin_src lua
Install:andUse("WindowHalfsAndThirds",
               {
                 config = {
                   use_frame_correctness = true
                 },
                 -- hotkeys = 'default',
                 fn = function (s)
                   --- 1/3 ---
                   cmodal:bind('cmd', 'H', 'Left Screen/3', function() s:thirdLeft() end)
                   cmodal:bind('cmd', 'L', 'Right Screen/3', function() s:thirdRight() end)
                   cmodal:bind('cmd', 'J', 'Top Screen/3', function() s:thirdUp() end)
                   cmodal:bind('cmd', 'K', 'Bottom Screen/3', function() s:thirdDown() end)
                 end
               }
)
#+end_src
** END Alt+R

#+begin_src lua
-- Register resizeM with modal supervisor
hsresizeM_keys = hsresizeM_keys or {"alt", "R"}
if string.len(hsresizeM_keys[2]) > 0 then
  spoon.ModalMgr.supervisor:bind(hsresizeM_keys[1], hsresizeM_keys[2], "Enter resizeM Environment", function()
                                   -- Deactivate some modal environments or not before activating a new one
                                   spoon.ModalMgr:deactivateAll()
                                   -- Show an status indicator so we know we're in some modal environment now
                                   spoon.ModalMgr:activate({"resizeM"}, "#B22222")
  end)
end
#+end_src
* URL dispatching to site-specific browsers

The [[http://www.hammerspoon.org/Spoons/URLDispatcher.html][URLDispatcher]] spoon makes it possible to open URLs with different browsers.
I have created different site-specific browsers using [[https://github.com/dmarmor/epichrome][Epichrome]], which allows me
to keep site-specific bookmarks, search settings, etc. I also use Edge as my
work browser (since it integrated with my work account), while using Brave for
everything else. I also use the =url_redir_decoders= parameter to rewrite some
URLs before they are opened, both to redirect certain URLs directly to their
corresponding applications (instead of going through the web browser) and to fix
a bug I  have experienced in opening URLs from PDF documents using Preview.

#+begin_src lua
function appID(app)
  return hs.application.infoForBundlePath(app)['CFBundleIdentifier']
end
#+end_src

# This is the real code that gets tangled out to my config file
#+begin_src lua :exports none
-- chromeBrowser = appID('/Applications/Google Chrome.app')

-- DefaultBrowser = chromeBrowser
-- WorkBrowser = chromeBrowser

-- GmailApp = appID('~/Applications/Epichrome/Gmail.app')
-- WikiApp = appID('~/Applications/Epichrome/Wiki.app')
-- CollabApp = WorkBrowser
-- SmcaApp = WorkBrowser
-- OpsGenieApp = WorkBrowser
-- TeamsApp = appID('/Applications/Microsoft Teams.app')

-- Install:andUse("URLDispatcher", {
--                  config = {
--                    url_patterns = {
--                      -- { "https?://wiki%.swisscom%.com",     WikiApp }
--                    },
--                    url_redir_decoders = {
--                      { "Fix broken Preview anchor URLs",
--                        "%%23", "#", false, "Preview" },
--                    },
--                    default_handler = DefaultBrowser
--                  },
--                  start = true
--                  -- loglevel = 'debug'
-- })
#+end_src
* Window and screen manipulation
** [[http://www.hammerspoon.org/Spoons/WindowScreenLeftAndRight.html][WindowScreenLeftAndRight]] 多屏间移动

The [[http://www.hammerspoon.org/Spoons/WindowScreenLeftAndRight.html][WindowScreenLeftAndRight]] spoon sets up key bindings for moving windows
between multiple screens.

1. move to left screen: ~ctrl + alt + cmd + <Left>~
2. move to right screen: ~ctrl + alt + cmd + <Right>~

#+begin_src lua
Install:andUse("WindowScreenLeftAndRight",
               {
                 config = {
                   animationDuration = 0
                 },
                 hotkeys = 'default',
--                 loglevel = 'debug'
               }
)
#+end_src
** [[http://www.hammerspoon.org/Spoons/WindowGrid.html][WindowGrid]] 网格布局

The [[http://www.hammerspoon.org/Spoons/WindowGrid.html][WindowGrid]] spoon sets up a key binding (=Hyper-g= here) to overlay a grid that
allows resizing windows by specifying their opposite corners.

~cmd + alt + ctrl + g~

#+begin_src lua
myGrid = { w = 6, h = 4 }
Install:andUse("WindowGrid",
               {
                 config = { gridGeometries =
                              { { myGrid.w .."x" .. myGrid.h } } },
                 hotkeys = {show_grid = {hyper, "g"}},
                 start = true
               }
)
#+end_src
** [[http://www.hammerspoon.org/Spoons/ToggleScreenRotation.html][ToggleScreenRotation]] 旋转屏幕

The [[http://www.hammerspoon.org/Spoons/ToggleScreenRotation.html][ToggleScreenRotation]] spoon sets up a key binding to rotate the external
screen (the spoon can set up keys for multiple screens if needed, but by default
it rotates the first external screen).

~ctrl + alt + cmd + <f15>~

#+begin_src lua
Install:andUse("ToggleScreenRotation",
               {
                 hotkeys = { first = {hyper, "f12"} }
               }
)
#+end_src
* HSaria2

#+begin_src lua
-- Install:andUse("HSaria2",
--                {
--                  fn = function (s)
--                    -- First we need to connect to aria2 rpc host
--                    hsaria2_host = hsaria2_host or "http://localhost:6700/jsonrpc"
--                    hsaria2_secret = hsaria2_secret or "token"
--                    s:connectToHost(hsaria2_host, hsaria2_secret)

--                    hsaria2_keys = hsaria2_keys or {"alt", "D"}
--                    if string.len(hsaria2_keys[2]) > 0 then
--                      spoon.ModalMgr.supervisor:bind(hsaria2_keys[1], hsaria2_keys[2], 'Toggle aria2 Panel', function() s:togglePanel() end)
--                    end
--                  end
--                }
-- )
#+end_src
I
#+end_src
* Organization and Productivity
** Capturing to Org mode(*Not Response*)

I now use Org-mode for task tracking and capturing. The following snippet runs
the =~/.emacs.d/bin/org-capture= script to bring up an Emacs window which allows
me to capture things from anywhere in the system. The code is a bit convoluted
because it needs to capture the current window and restore it after the
org-capture window closes, otherwise Emacs is brought to the front.

~cmd + alt + ctrl + t~

#+begin_src lua
org_capture_path = os.getenv("HOME").."/.hammerspoon/files/org-capture.lua"
script_file = io.open(org_capture_path, "w")
script_file:write([[local win = hs.window.frontmostWindow()
local o,s,t,r = hs.execute("~/.emacs.d/bin/org-capture", true)
if not s then
  print("Error when running org-capture: "..o.."\n")
end
win:focus()
]])
script_file:close()

hs.hotkey.bindSpec({hyper, "t"},
  function ()
    hs.task.new("/bin/bash", nil, { "-l", "-c", "/usr/local/bin/hs "..org_capture_path }):start()
  end
)
#+end_src
* System and UI
** Basic

#+begin_src lua
----------------------------------------------------------------------------------------------------
-- Register lock screen
hslock_keys = hslock_keys or {"alt", "L"}
if string.len(hslock_keys[2]) > 0 then
    spoon.ModalMgr.supervisor:bind(hslock_keys[1], hslock_keys[2], "Lock Screen", function()
        hs.caffeinate.lockScreen()
    end)
end

----------------------------------------------------------------------------------------------------
-- Register AClock
if spoon.AClock then
    hsaclock_keys = hsaclock_keys or {"alt", "T"}
    if string.len(hsaclock_keys[2]) > 0 then
        spoon.ModalMgr.supervisor:bind(hsaclock_keys[1], hsaclock_keys[2], "Toggle Floating Clock", function() spoon.AClock:toggleShow() end)
    end
end
#+end_src
** Get Current Tab Url

#+begin_src lua
-- ----------------------------------------------------------------------------------------------------
-- -- Register browser tab typist: Type URL of current tab of running browser in markdown format. i.e. [title](link)
-- hstype_keys = hstype_keys or {"alt", "V"}
-- if string.len(hstype_keys[2]) > 0 then
--     spoon.ModalMgr.supervisor:bind(hstype_keys[1], hstype_keys[2], "Type Browser Link", function()
--         local safari_running = hs.application.applicationsForBundleID("com.apple.Safari")
--         local chrome_running = hs.application.applicationsForBundleID("com.google.Chrome")
--         -- if #safari_running > 0 then
--         --     local stat, data = hs.applescript('tell application "Safari" to get {URL, name} of current tab of window 1')
--         --     if stat then hs.eventtap.keyStrokes("[" .. data[2] .. "](" .. data[1] .. ")") end
--         if #chrome_running > 0 then
--             local stat, data = hs.applescript('tell application "Google Chrome" to get {URL, title} of active tab of window 1')
--             -- Markdown Format
--             -- if stat then hs.eventtap.keyStrokes("[" .. data[2] .. "](" .. data[1] .. ")") end
--             -- Org Format
--             if stat then hs.eventtap.keyStrokes("[[" .. data[1] .. "][" .. data[2] .. "]]") end
--         end
--     end)
-- end
#+end_src

** AClock( *Disabled*  )

#+begin_src lua
-- Install:andUse("AClock",
--                {
--                  config = {
--                    format = "%H:%M"
--                  },
--                  fn = function(s)
--                    hsaclock_keys = hsaclock_keys or {"alt", "T"}
--                    if string.len(hsaclock_keys[2]) > 0 then
--                      spoon.ModalMgr.supervisor:bind(hsaclock_keys[1], hsaclock_keys[2], "Toggle Floating Clock", function() s:toggleShow() end)
--                    end
--                  end

--                  -- start = true
--                }
-- )

#+end_src
** General Hammerspoon utilities

BTT: BetterTouchTool(*付费*)

The =BTT_restart_Hammerspoon= function sets up a BetterTouchTool widget which also
executes the =config_reload= action from the spoon. This gets assigned to the =fn=
config parameter in the configuration of the Hammer spoon below, which has the
effect of calling the function with the Spoon object as its parameter.

This is still manual - the =uuid= parameter contains the ID of the BTT widget to
configure, and for now you have to get it by hand from BTT and paste it here.

#+begin_src lua :tangle no
function BTT_restart_hammerspoon(s)
  BTT:bindSpoonActions(s, {
                         config_reload = {
                           kind = 'touchbarButton',
                           uuid = "FF8DA717-737F-4C42-BF91-E8826E586FA1",
                           name = "Restart",
                           icon = hs.image.imageFromName(
                             hs.image.systemImageNames.ApplicationIcon),
                           color = hs.drawing.color.x11.orange,
  }})
end
#+end_src

The [[https://zzamboni.github.io/zzSpoons/Hammer.html][Hammer]] spoon (get it? hehe) is a simple wrapper around some common
Hammerspoon configuration variables. Note that this gets loaded from my personal
repo, since it's not in the official repository.

~cmd + alt + ctrl + r~: reload config

~cmd + alt + ctrl + y~: toggle console

#+begin_src lua
Install:andUse("Hammer",
               {
                 -- repo = 'zzspoons',
                 config = { auto_reload_config = true },
                 hotkeys = {
                   config_reload = {hyper, "r"},
                   toggle_console = {hyper, "y"}
                 },
--                 fn = BTT_restart_Hammerspoon,
                 start = true
               }
)
#+end_src

** Caffeine: Control system/display sleep

The [[http://www.hammerspoon.org/Spoons/Caffeine.html][Caffeine]] spoon allows preventing the display and the machine from sleeping.
I use it frequently when playing music from my machine, to avoid having to
unlock the screen whenever I want to change the music. In this case we also
create a function =BTT_caffeine_widget= to configure the widget to both execute
the corresponding function, and to set its icon according to the current state.

#+begin_src lua :tangle no
function BTT_caffeine_widget(s)
  BTT:bindSpoonActions(s, {
                         toggle = {
                           kind = 'touchbarWidget',
                           uuid = '72A96332-E908-4872-A6B4-8A6ED2E3586F',
                           name = 'Caffeine',
                           widget_code = [[
do
  title = " "
  icon = hs.image.imageFromPath(spoon.Caffeine.spoonPath.."/caffeine-off.pdf")
  if (hs.caffeinate.get('displayIdle')) then
    icon = hs.image.imageFromPath(spoon.Caffeine.spoonPath.."/caffeine-on.pdf")
  end
  print(hs.json.encode({ text = title,
                         icon_data = BTT:hsimageToBTTIconData(icon) }))
end
      ]],
                           code = "spoon.Caffeine.clicked()",
                           widget_interval = 1,
                           color = hs.drawing.color.x11.black,
                           icon_only = true,
                           icon_size = hs.geometry.size(15,15),
                           BTTTriggerConfig = {
                             BTTTouchBarFreeSpaceAfterButton = 0,
                             BTTTouchBarItemPadding = -6,
                           },
                         }
  })
end
#+end_src

#+begin_src lua
Install:andUse("Caffeine", {
                 start = true,
                 hotkeys = {
                   toggle = { hyper, "1" }
                 },
--                 fn = BTT_caffeine_widget,
})
#+end_src
** Finding colors( *Disabled* )

One of my original bits of Hammerspoon code, now made into a spoon (although I
keep it disabled, since I don't really use it). The [[http://www.hammerspoon.org/Spoons/ColorPicker.html][ColorPicker]] spoon shows a
menu of the available color palettes, and when you select one, it draws swatches
in all the colors in that palette, covering the whole screen. You can click on
any of them to copy its name to the clipboard, or cmd-click to copy its RGB
code.


#+begin_src lua
Install:andUse("ColorPicker",
               {
                 -- 太卡了
                 disable = true,
                 hotkeys = {
                   show = { hyper, "z" }
                 },
                 config = {
                   show_in_menubar = false,
                 },
                 start = true,
               }
)
#+end_src
** Displaying keyboard shortcuts

The [[http://www.hammerspoon.org/Spoons/KSheet.html][KSheet]] spoon traverses the current application's menus and builds a
cheatsheet of the keyboard shortcuts, showing it in a nice popup window.

#+begin_src lua :tangle no
Install:andUse("KSheet",
               {
                 hotkeys = {
                   toggle = { hyper, "/" }
}})
#+end_src

** Unmounting external disks on sleep

The =EjectMenu= spoon automatically ejects all external disks before the system
goes to sleep. I use this to avoid warnings from macOS when I close my laptop
and disconnect it from my hub without explicitly unmounting my backup disk
before. I disable the menubar icon, which is shown by default by the Spoon.

#+begin_src lua
-- Install:andUse("EjectMenu", {
--                  config = {
--                    eject_on_lid_close = false,
--                    eject_on_sleep = true,
--                    show_in_menubar = false,
--                    notify = true,
--                  },
--                  hotkeys = { ejectAll = { hyper, "=" } },
--                  start = true,
-- --                 loglevel = 'debug'
-- })
#+end_src
* End ModalMgr

#+begin_src lua
----------------------------------------------------------------------------------------------------
-- Finally we initialize ModalMgr supervisor
spoon.ModalMgr.supervisor:enter()
#+end_src

* Over!!!

#+begin_src lua
hs.alert('Hammerspoon config Reload!')
#+end_src
